#!/usr/bin/env python

'''

Command Line tool to run a python selector on a datasets

Author: Evan K. Friis, UW Madison

'''

from RecoLuminosity.LumiDB import argparse
import logging
import os
import sys
from termcolor import colored

log = logging.getLogger("megadebug")
log.setLevel(logging.WARNING)

parser = argparse.ArgumentParser()
args = sys.argv[:]
sys.argv = []

import ROOT

if __name__ == "__main__":

    parser.add_argument('selector', metavar='selector', type=str, 
                        help='Path to TPySelector module')

    parser.add_argument('inputs', metavar='inputs', type=str, 
                        help='Text file with input files.  '
                        'One job will be created for each input file.')

    parser.add_argument('tree', metavar='tree', type=str, 
                        help='Path to TTree in data files (Ex: /my/dir/myTree)')

    parser.add_argument('selections', metavar="selection", nargs="+",
                        help="Which selections to apply in the cut flow."
                        " The selections must be importable from the Selector"
                        " module.  If a '+' is appended to the selection, it will"
                        " be expanded into subselections.  If - is appended, "
                        "it will be applied but not printed.")

    parser.add_argument('--events', metavar='run:evt:lumi', nargs="*",
                        help = "Only process the given events")

    args = parser.parse_args(args[1:])

    log.info("Checking inputs file %s exists..." % args.inputs)
    # Get the inputs to make sure it exists
    if not os.path.exists(args.inputs):
        log.error(
            "Error: inputs %s input file does not exist", args.inputs)
        sys.exit(5)
    file_list = []
    with open(args.inputs) as inputs_file:
        for line in inputs_file:
            line = line.strip()
            if line and not line.startswith('#'):
                file_list.append(line)

    if not file_list:
        log.error("Dataset %s has no files!  Skipping..." % args.inputs)
        sys.exit(1)

    event_list = set([])
    log.info("Building event list")
    if args.events:
        for event in args.events:
            # optional delimeters
            event = event.replace(',', ':')
            event_tuple = tuple(int(x) for x in event.split(':'))
            if len(event_tuple) != 3:
                raise InputError("I don't understand the event: %s" % event)
        event_list.add(event_tuple)

    log.info("Building TChain")
    chain = ROOT.TChain(args.tree)
    for file in file_list:
        chain.AddFile(file)

    log.info("Building selectors")
    path_to_selector = os.path.dirname(os.path.abspath(args.selector))
    module_name = os.path.basename(args.selector)
    class_name = module_name.replace('.py', '')
    log.info("Importing class %s from %s", class_name, path_to_selector)

    module = __import__(class_name, fromlist=[args.selections])
    log.info("Loading %i selections", len(args.selections))
    selections = []
    for selection in args.selections:
        command = None
        if "+" in selection:
            command = "+"
        elif "-" in selection:
            command = "-"

        selection = selection.replace('+', '')
        selection = selection.replace('-', '')
        selections.append( (selection, getattr(module, selection), command) )

    log.info("Beginning loop over %i TChain entries", chain.GetEntries())

    current_event = (None, None, None)

    def print_event_header(current_event):
        print colored('*' * 80, color='magenta')
        print colored("**** Run %i Lumi %i Event %i" % current_event, 
                      color='magenta')
        print colored('*' * 80, color='magenta')

    for row in xrange(chain.GetEntries()):
        chain.GetEntry(row)
        this_event = (chain.run, chain.lumi, chain.evt)
        if event_list and this_event not in event_list:
            continue
        if this_event != current_event:
            print_event_header(this_event)
            current_event = this_event
        # The current FSA we are examining
        fsa_index = chain.idx
        all_passed = True
        for name, selection, command in selections:
            passed = selection(chain)
            explanation = selection.explain(chain)
            all_passed = all_passed and passed
            if command == None:
                output = " ".join(str(x) for x in [fsa_index, name, passed, explanation])
                if passed:
                    print colored(output, color='green')
                else:
                    print colored(output, color='red')
            elif command == "+":
                output = " ".join(str(x) for x in [fsa_index, name, "==>", passed, explanation])
                if passed:
                    print colored(output, color='green')
                else:
                    print colored(output, color='red')
                for subselection in selection:
                    subpassed = subselection(chain)
                    subexplanation = subselection.explain(chain)
                    output = " ".join(str(x) for x in [
                        fsa_index, "  ", subselection, subpassed, subexplanation])
                    if subpassed:
                        print colored(output, color='green')
                    else:
                        print colored(output, color='red')

                    if not subpassed:
                        break
            elif command == "-":
                pass # Don't print, just apply the selection
            if not passed:
                break

